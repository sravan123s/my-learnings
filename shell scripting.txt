CHECK SCREEN SHOTS FOR MORE INFORMATION

RECENT AUTOMATION DONE USING SHELL SCRIPTING
   monitoring- i wrote a script like to do custom health checks so what my script will do it will exicute for evary 5 min if it ok it 
   will send ok msg else it will send email to my mail address
   
WITE INFINITE LOOP
   while true
   do 
      echo "HI"
   done  

$#==> it will print the no of arguments present
$@==> it will print the all arguments6
$$==> it will give the process ID if the script
$!==> process ID of the last background job 
$*==> it will print the all arguments6 like $*
$1==> firts argument
$0==> name of the shell script 
$@==> ecach quoted string treated as a seperate argument

to find any files with the healp of script we can use -f flage and for directories -d flage and to find space of the file we use -s flage
 
EXAMPLE SYNTAX FOR CASE STATEMENT
#! /bin/bash
vehical=$1
case $vehical in
  "car" )
      echo "rent is 200" ;;
  "bus" )
      echo "rent is 300" ;;
    *)
      echo "enter vehical name" ;;
esac
WHILE LOOP ==> It will exicute when the condition is true
#! /bin/bash
 n=1
 while [ $n -le 10 ]
 do
   echo "$n"
   n=$(( n+1 )) or (( n++ )) or (( ++n ))
 done
UNTIL LOOP ==> It will exicute when the condition is not true
#! /bin/bash
n=1
until [ $n -ge 10 ]
do
 echo $n
 n=$(( n+1 )) or (( n++ )) or (( ++n ))
done
FOR LOOP 1 
#! /bin/bash
for i in 1 2 3 4 5 or {1..5} 
do
 echo $i
done
FOR LOOP 2
#! /bin/bash
for (( i=0; i<=5; i++ ))
do
 echo $i
done
FOR LOOP 3
#! /bin/bash
for command in ls pwd date
do
  $command
done
EXAMPLE SCRIPT TO READ FILES
#! /bin/bash
cat  authorized_keys | while read p
do
 echo $p
done
EXAMPLE SYNTAX SCRIPT FOR FUNCTIONS
#!/bin/bash
function print(){
  echo $1 $2 $3
}
print sravan mohan rakesh

REAL TIME SCENARIO:
Scenario: Everyday from Monday to Friday one directory will be created under /fullbackup/dailybackup/YYYY-MM-DD and it will move backup to its parent directory everyday midnight /fullbackup/archive/, However Saturday, Sunday and Monday directories will move to /fullbackup/archive path every Monday evening.
Directory Names Example: 2018-12-24 2018-12-25 2018-12-26 2018-12-27 2018-12-28
Question: I would like to delete directories older than two days from /fullbackup/archive path. How do you do it using any scripting methods.
SCRIPT:
#!/bin/bash
## Delete directories older than 2 days ba,sed on dir name validation
ls -ltr /fullbackup/archive/ | awk '{print $9}' > /scripts/dirs 
for i in cat /scripts/dirs
do
STARTTIME=$(date +%s -d"$i 00:00:00")
ENDTIME=$(date +%s)
echo $((ENDTIME-STARTTIME)) | awk '{print int ($1/60)}' > /scripts/value
COUNT='cat /scripts/value'
if [ $COUNT -gt 2880 ]
then
echo "Directories arde older then 2 days $i" > /scripts/joblog
rm -rf /fullbachuo/archive/$iffi
done
REAL TIME SCENARIO:
Scenario:Collecting and storing CPU, Memory and Disk Usage Report from servers in single file. Using single shell script
#!/bin/bash
HOSTNAME:$(hostname)
DATET=$(date "+%Y-%m-%d %H:%M:%S")
CPUSAGE:$(top -b -n 1 -d1 | grep "cpu(s)" |awk '{print $2}' |awk -F. '{print $1} )
MEMUSAGE=$(free |grep Mem |awk '{print $3/$2 * 100}')
DISKUSAGE=$(df -P |column -t |awk '{print $5}' |tail -n |sed 's/%//g')

echo "HostName, Date&Time, CPUi(%), Mem(%), Disk(%)" >> /opt/usagereport
echo "$HOSTNAME, $DATET, $CPUSAGE, $MEMUSAGE, $DISKUSAGE" >> /opt/usagereport

for i in 'cat /scripts/hostlist':
do
HOSTNAME:$(ssh $i hostname)
DATET=$(ssh $i  date "+%Y-%m-%d %H:%M:%S")
CPUSAGE:$(ssh $i  top -b -n 1 -d1 | grep "cpu(s)" |awk '{print $2}' |awk -F. '{print $1} )
MEMUSAGE=$(ssh $i  free |grep Mem |awk '{print $3/$2 * 100}')
DISKUSAGE=$(ssh $i  df -P |column -t |awk '{print $5}' |tail -n |sed 's/%//g')

echo "$HOSTNAME, $DATET, $CPUSAGE, $MEMUSAGE, $DISKUSAGE" >> /opt/usagereport
done

SOME REAL TIME USES
1. for monitoring like ping one server and check it is up or not and send output to one file. Insted of doing this manually we use shell script by using cronjob 
   we can shedule the job for to execute daily you can simply verify the file whether all servers are running well or not
2. monitoringdisk space usage check screen shots for script